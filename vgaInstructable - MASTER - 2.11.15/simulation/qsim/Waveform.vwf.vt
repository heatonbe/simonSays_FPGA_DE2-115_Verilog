// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2015 15:37:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    simonSaysVGA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simonSaysVGA_vlg_sample_tst(
	clk,
	color,
	play,
	reset,
	rst,
	sampler_tx
);
input  clk;
input [3:0] color;
input  play;
input  reset;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or color or play or reset or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module simonSaysVGA_vlg_check_tst (
	hsync,
	level_num_ssd,
	level_ssd,
	state_ssd,
	vga_B,
	vga_G,
	vga_R,
	vga_blank,
	vga_clk,
	vga_sync,
	vsync,
	sampler_rx
);
input  hsync;
input [0:6] level_num_ssd;
input [0:6] level_ssd;
input [0:6] state_ssd;
input [7:0] vga_B;
input [7:0] vga_G;
input [7:0] vga_R;
input  vga_blank;
input  vga_clk;
input  vga_sync;
input  vsync;
input sampler_rx;

reg  hsync_expected;
reg [0:6] level_num_ssd_expected;
reg [0:6] level_ssd_expected;
reg [0:6] state_ssd_expected;
reg [7:0] vga_B_expected;
reg [7:0] vga_G_expected;
reg [7:0] vga_R_expected;
reg  vga_blank_expected;
reg  vga_clk_expected;
reg  vga_sync_expected;
reg  vsync_expected;

reg  hsync_prev;
reg [0:6] level_num_ssd_prev;
reg [0:6] level_ssd_prev;
reg [0:6] state_ssd_prev;
reg [7:0] vga_B_prev;
reg [7:0] vga_G_prev;
reg [7:0] vga_R_prev;
reg  vga_blank_prev;
reg  vga_clk_prev;
reg  vga_sync_prev;
reg  vsync_prev;

reg  hsync_expected_prev;
reg [0:6] level_num_ssd_expected_prev;
reg [0:6] level_ssd_expected_prev;
reg [0:6] state_ssd_expected_prev;
reg [7:0] vga_B_expected_prev;
reg [7:0] vga_G_expected_prev;
reg [7:0] vga_R_expected_prev;
reg  vga_blank_expected_prev;
reg  vga_clk_expected_prev;
reg  vga_sync_expected_prev;
reg  vsync_expected_prev;

reg  last_hsync_exp;
reg [0:6] last_level_num_ssd_exp;
reg [0:6] last_level_ssd_exp;
reg [0:6] last_state_ssd_exp;
reg [7:0] last_vga_B_exp;
reg [7:0] last_vga_G_exp;
reg [7:0] last_vga_R_exp;
reg  last_vga_blank_exp;
reg  last_vga_clk_exp;
reg  last_vga_sync_exp;
reg  last_vsync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	hsync_prev = hsync;
	level_num_ssd_prev = level_num_ssd;
	level_ssd_prev = level_ssd;
	state_ssd_prev = state_ssd;
	vga_B_prev = vga_B;
	vga_G_prev = vga_G;
	vga_R_prev = vga_R;
	vga_blank_prev = vga_blank;
	vga_clk_prev = vga_clk;
	vga_sync_prev = vga_sync;
	vsync_prev = vsync;
end

// update expected /o prevs

always @(trigger)
begin
	hsync_expected_prev = hsync_expected;
	level_num_ssd_expected_prev = level_num_ssd_expected;
	level_ssd_expected_prev = level_ssd_expected;
	state_ssd_expected_prev = state_ssd_expected;
	vga_B_expected_prev = vga_B_expected;
	vga_G_expected_prev = vga_G_expected;
	vga_R_expected_prev = vga_R_expected;
	vga_blank_expected_prev = vga_blank_expected;
	vga_clk_expected_prev = vga_clk_expected;
	vga_sync_expected_prev = vga_sync_expected;
	vsync_expected_prev = vsync_expected;
end



// expected hsync
initial
begin
	hsync_expected = 1'bX;
end 
// expected level_num_ssd[ 6 ]
initial
begin
	level_num_ssd_expected[6] = 1'bX;
end 
// expected level_num_ssd[ 5 ]
initial
begin
	level_num_ssd_expected[5] = 1'bX;
end 
// expected level_num_ssd[ 4 ]
initial
begin
	level_num_ssd_expected[4] = 1'bX;
end 
// expected level_num_ssd[ 3 ]
initial
begin
	level_num_ssd_expected[3] = 1'bX;
end 
// expected level_num_ssd[ 2 ]
initial
begin
	level_num_ssd_expected[2] = 1'bX;
end 
// expected level_num_ssd[ 1 ]
initial
begin
	level_num_ssd_expected[1] = 1'bX;
end 
// expected level_num_ssd[ 0 ]
initial
begin
	level_num_ssd_expected[0] = 1'bX;
end 
// expected level_ssd[ 6 ]
initial
begin
	level_ssd_expected[6] = 1'bX;
end 
// expected level_ssd[ 5 ]
initial
begin
	level_ssd_expected[5] = 1'bX;
end 
// expected level_ssd[ 4 ]
initial
begin
	level_ssd_expected[4] = 1'bX;
end 
// expected level_ssd[ 3 ]
initial
begin
	level_ssd_expected[3] = 1'bX;
end 
// expected level_ssd[ 2 ]
initial
begin
	level_ssd_expected[2] = 1'bX;
end 
// expected level_ssd[ 1 ]
initial
begin
	level_ssd_expected[1] = 1'bX;
end 
// expected level_ssd[ 0 ]
initial
begin
	level_ssd_expected[0] = 1'bX;
end 
// expected state_ssd[ 6 ]
initial
begin
	state_ssd_expected[6] = 1'bX;
end 
// expected state_ssd[ 5 ]
initial
begin
	state_ssd_expected[5] = 1'bX;
end 
// expected state_ssd[ 4 ]
initial
begin
	state_ssd_expected[4] = 1'bX;
end 
// expected state_ssd[ 3 ]
initial
begin
	state_ssd_expected[3] = 1'bX;
end 
// expected state_ssd[ 2 ]
initial
begin
	state_ssd_expected[2] = 1'bX;
end 
// expected state_ssd[ 1 ]
initial
begin
	state_ssd_expected[1] = 1'bX;
end 
// expected state_ssd[ 0 ]
initial
begin
	state_ssd_expected[0] = 1'bX;
end 
// expected vga_B[ 7 ]
initial
begin
	vga_B_expected[7] = 1'bX;
end 
// expected vga_B[ 6 ]
initial
begin
	vga_B_expected[6] = 1'bX;
end 
// expected vga_B[ 5 ]
initial
begin
	vga_B_expected[5] = 1'bX;
end 
// expected vga_B[ 4 ]
initial
begin
	vga_B_expected[4] = 1'bX;
end 
// expected vga_B[ 3 ]
initial
begin
	vga_B_expected[3] = 1'bX;
end 
// expected vga_B[ 2 ]
initial
begin
	vga_B_expected[2] = 1'bX;
end 
// expected vga_B[ 1 ]
initial
begin
	vga_B_expected[1] = 1'bX;
end 
// expected vga_B[ 0 ]
initial
begin
	vga_B_expected[0] = 1'bX;
end 
// expected vga_G[ 7 ]
initial
begin
	vga_G_expected[7] = 1'bX;
end 
// expected vga_G[ 6 ]
initial
begin
	vga_G_expected[6] = 1'bX;
end 
// expected vga_G[ 5 ]
initial
begin
	vga_G_expected[5] = 1'bX;
end 
// expected vga_G[ 4 ]
initial
begin
	vga_G_expected[4] = 1'bX;
end 
// expected vga_G[ 3 ]
initial
begin
	vga_G_expected[3] = 1'bX;
end 
// expected vga_G[ 2 ]
initial
begin
	vga_G_expected[2] = 1'bX;
end 
// expected vga_G[ 1 ]
initial
begin
	vga_G_expected[1] = 1'bX;
end 
// expected vga_G[ 0 ]
initial
begin
	vga_G_expected[0] = 1'bX;
end 
// expected vga_R[ 7 ]
initial
begin
	vga_R_expected[7] = 1'bX;
end 
// expected vga_R[ 6 ]
initial
begin
	vga_R_expected[6] = 1'bX;
end 
// expected vga_R[ 5 ]
initial
begin
	vga_R_expected[5] = 1'bX;
end 
// expected vga_R[ 4 ]
initial
begin
	vga_R_expected[4] = 1'bX;
end 
// expected vga_R[ 3 ]
initial
begin
	vga_R_expected[3] = 1'bX;
end 
// expected vga_R[ 2 ]
initial
begin
	vga_R_expected[2] = 1'bX;
end 
// expected vga_R[ 1 ]
initial
begin
	vga_R_expected[1] = 1'bX;
end 
// expected vga_R[ 0 ]
initial
begin
	vga_R_expected[0] = 1'bX;
end 

// expected vga_blank
initial
begin
	vga_blank_expected = 1'bX;
end 

// expected vga_clk
initial
begin
	vga_clk_expected = 1'bX;
end 

// expected vga_sync
initial
begin
	vga_sync_expected = 1'bX;
end 

// expected vsync
initial
begin
	vsync_expected = 1'bX;
end 
// generate trigger
always @(hsync_expected or hsync or level_num_ssd_expected or level_num_ssd or level_ssd_expected or level_ssd or state_ssd_expected or state_ssd or vga_B_expected or vga_B or vga_G_expected or vga_G or vga_R_expected or vga_R or vga_blank_expected or vga_blank or vga_clk_expected or vga_clk or vga_sync_expected or vga_sync or vsync_expected or vsync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hsync = %b | expected level_num_ssd = %b | expected level_ssd = %b | expected state_ssd = %b | expected vga_B = %b | expected vga_G = %b | expected vga_R = %b | expected vga_blank = %b | expected vga_clk = %b | expected vga_sync = %b | expected vsync = %b | ",hsync_expected_prev,level_num_ssd_expected_prev,level_ssd_expected_prev,state_ssd_expected_prev,vga_B_expected_prev,vga_G_expected_prev,vga_R_expected_prev,vga_blank_expected_prev,vga_clk_expected_prev,vga_sync_expected_prev,vsync_expected_prev);
	$display("| real hsync = %b | real level_num_ssd = %b | real level_ssd = %b | real state_ssd = %b | real vga_B = %b | real vga_G = %b | real vga_R = %b | real vga_blank = %b | real vga_clk = %b | real vga_sync = %b | real vsync = %b | ",hsync_prev,level_num_ssd_prev,level_ssd_prev,state_ssd_prev,vga_B_prev,vga_G_prev,vga_R_prev,vga_blank_prev,vga_clk_prev,vga_sync_prev,vsync_prev);
`endif
	if (
		( hsync_expected_prev !== 1'bx ) && ( hsync_prev !== hsync_expected_prev )
		&& ((hsync_expected_prev !== last_hsync_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hsync_expected_prev);
		$display ("     Real value = %b", hsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hsync_exp = hsync_expected_prev;
	end
	if (
		( level_num_ssd_expected_prev[0] !== 1'bx ) && ( level_num_ssd_prev[0] !== level_num_ssd_expected_prev[0] )
		&& ((level_num_ssd_expected_prev[0] !== last_level_num_ssd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[0] = level_num_ssd_expected_prev[0];
	end
	if (
		( level_num_ssd_expected_prev[1] !== 1'bx ) && ( level_num_ssd_prev[1] !== level_num_ssd_expected_prev[1] )
		&& ((level_num_ssd_expected_prev[1] !== last_level_num_ssd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[1] = level_num_ssd_expected_prev[1];
	end
	if (
		( level_num_ssd_expected_prev[2] !== 1'bx ) && ( level_num_ssd_prev[2] !== level_num_ssd_expected_prev[2] )
		&& ((level_num_ssd_expected_prev[2] !== last_level_num_ssd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[2] = level_num_ssd_expected_prev[2];
	end
	if (
		( level_num_ssd_expected_prev[3] !== 1'bx ) && ( level_num_ssd_prev[3] !== level_num_ssd_expected_prev[3] )
		&& ((level_num_ssd_expected_prev[3] !== last_level_num_ssd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[3] = level_num_ssd_expected_prev[3];
	end
	if (
		( level_num_ssd_expected_prev[4] !== 1'bx ) && ( level_num_ssd_prev[4] !== level_num_ssd_expected_prev[4] )
		&& ((level_num_ssd_expected_prev[4] !== last_level_num_ssd_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[4] = level_num_ssd_expected_prev[4];
	end
	if (
		( level_num_ssd_expected_prev[5] !== 1'bx ) && ( level_num_ssd_prev[5] !== level_num_ssd_expected_prev[5] )
		&& ((level_num_ssd_expected_prev[5] !== last_level_num_ssd_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[5] = level_num_ssd_expected_prev[5];
	end
	if (
		( level_num_ssd_expected_prev[6] !== 1'bx ) && ( level_num_ssd_prev[6] !== level_num_ssd_expected_prev[6] )
		&& ((level_num_ssd_expected_prev[6] !== last_level_num_ssd_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_num_ssd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_num_ssd_expected_prev);
		$display ("     Real value = %b", level_num_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_level_num_ssd_exp[6] = level_num_ssd_expected_prev[6];
	end
	if (
		( level_ssd_expected_prev[0] !== 1'bx ) && ( level_ssd_prev[0] !== level_ssd_expected_prev[0] )
		&& ((level_ssd_expected_prev[0] !== last_level_ssd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[0] = level_ssd_expected_prev[0];
	end
	if (
		( level_ssd_expected_prev[1] !== 1'bx ) && ( level_ssd_prev[1] !== level_ssd_expected_prev[1] )
		&& ((level_ssd_expected_prev[1] !== last_level_ssd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[1] = level_ssd_expected_prev[1];
	end
	if (
		( level_ssd_expected_prev[2] !== 1'bx ) && ( level_ssd_prev[2] !== level_ssd_expected_prev[2] )
		&& ((level_ssd_expected_prev[2] !== last_level_ssd_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[2] = level_ssd_expected_prev[2];
	end
	if (
		( level_ssd_expected_prev[3] !== 1'bx ) && ( level_ssd_prev[3] !== level_ssd_expected_prev[3] )
		&& ((level_ssd_expected_prev[3] !== last_level_ssd_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[3] = level_ssd_expected_prev[3];
	end
	if (
		( level_ssd_expected_prev[4] !== 1'bx ) && ( level_ssd_prev[4] !== level_ssd_expected_prev[4] )
		&& ((level_ssd_expected_prev[4] !== last_level_ssd_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[4] = level_ssd_expected_prev[4];
	end
	if (
		( level_ssd_expected_prev[5] !== 1'bx ) && ( level_ssd_prev[5] !== level_ssd_expected_prev[5] )
		&& ((level_ssd_expected_prev[5] !== last_level_ssd_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[5] = level_ssd_expected_prev[5];
	end
	if (
		( level_ssd_expected_prev[6] !== 1'bx ) && ( level_ssd_prev[6] !== level_ssd_expected_prev[6] )
		&& ((level_ssd_expected_prev[6] !== last_level_ssd_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port level_ssd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", level_ssd_expected_prev);
		$display ("     Real value = %b", level_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_level_ssd_exp[6] = level_ssd_expected_prev[6];
	end
	if (
		( state_ssd_expected_prev[0] !== 1'bx ) && ( state_ssd_prev[0] !== state_ssd_expected_prev[0] )
		&& ((state_ssd_expected_prev[0] !== last_state_ssd_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[0] = state_ssd_expected_prev[0];
	end
	if (
		( state_ssd_expected_prev[1] !== 1'bx ) && ( state_ssd_prev[1] !== state_ssd_expected_prev[1] )
		&& ((state_ssd_expected_prev[1] !== last_state_ssd_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[1] = state_ssd_expected_prev[1];
	end
	if (
		( state_ssd_expected_prev[2] !== 1'bx ) && ( state_ssd_prev[2] !== state_ssd_expected_prev[2] )
		&& ((state_ssd_expected_prev[2] !== last_state_ssd_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[2] = state_ssd_expected_prev[2];
	end
	if (
		( state_ssd_expected_prev[3] !== 1'bx ) && ( state_ssd_prev[3] !== state_ssd_expected_prev[3] )
		&& ((state_ssd_expected_prev[3] !== last_state_ssd_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[3] = state_ssd_expected_prev[3];
	end
	if (
		( state_ssd_expected_prev[4] !== 1'bx ) && ( state_ssd_prev[4] !== state_ssd_expected_prev[4] )
		&& ((state_ssd_expected_prev[4] !== last_state_ssd_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[4] = state_ssd_expected_prev[4];
	end
	if (
		( state_ssd_expected_prev[5] !== 1'bx ) && ( state_ssd_prev[5] !== state_ssd_expected_prev[5] )
		&& ((state_ssd_expected_prev[5] !== last_state_ssd_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[5] = state_ssd_expected_prev[5];
	end
	if (
		( state_ssd_expected_prev[6] !== 1'bx ) && ( state_ssd_prev[6] !== state_ssd_expected_prev[6] )
		&& ((state_ssd_expected_prev[6] !== last_state_ssd_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ssd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ssd_expected_prev);
		$display ("     Real value = %b", state_ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_ssd_exp[6] = state_ssd_expected_prev[6];
	end
	if (
		( vga_B_expected_prev[0] !== 1'bx ) && ( vga_B_prev[0] !== vga_B_expected_prev[0] )
		&& ((vga_B_expected_prev[0] !== last_vga_B_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[0] = vga_B_expected_prev[0];
	end
	if (
		( vga_B_expected_prev[1] !== 1'bx ) && ( vga_B_prev[1] !== vga_B_expected_prev[1] )
		&& ((vga_B_expected_prev[1] !== last_vga_B_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[1] = vga_B_expected_prev[1];
	end
	if (
		( vga_B_expected_prev[2] !== 1'bx ) && ( vga_B_prev[2] !== vga_B_expected_prev[2] )
		&& ((vga_B_expected_prev[2] !== last_vga_B_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[2] = vga_B_expected_prev[2];
	end
	if (
		( vga_B_expected_prev[3] !== 1'bx ) && ( vga_B_prev[3] !== vga_B_expected_prev[3] )
		&& ((vga_B_expected_prev[3] !== last_vga_B_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[3] = vga_B_expected_prev[3];
	end
	if (
		( vga_B_expected_prev[4] !== 1'bx ) && ( vga_B_prev[4] !== vga_B_expected_prev[4] )
		&& ((vga_B_expected_prev[4] !== last_vga_B_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[4] = vga_B_expected_prev[4];
	end
	if (
		( vga_B_expected_prev[5] !== 1'bx ) && ( vga_B_prev[5] !== vga_B_expected_prev[5] )
		&& ((vga_B_expected_prev[5] !== last_vga_B_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[5] = vga_B_expected_prev[5];
	end
	if (
		( vga_B_expected_prev[6] !== 1'bx ) && ( vga_B_prev[6] !== vga_B_expected_prev[6] )
		&& ((vga_B_expected_prev[6] !== last_vga_B_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[6] = vga_B_expected_prev[6];
	end
	if (
		( vga_B_expected_prev[7] !== 1'bx ) && ( vga_B_prev[7] !== vga_B_expected_prev[7] )
		&& ((vga_B_expected_prev[7] !== last_vga_B_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_B_expected_prev);
		$display ("     Real value = %b", vga_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_B_exp[7] = vga_B_expected_prev[7];
	end
	if (
		( vga_G_expected_prev[0] !== 1'bx ) && ( vga_G_prev[0] !== vga_G_expected_prev[0] )
		&& ((vga_G_expected_prev[0] !== last_vga_G_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[0] = vga_G_expected_prev[0];
	end
	if (
		( vga_G_expected_prev[1] !== 1'bx ) && ( vga_G_prev[1] !== vga_G_expected_prev[1] )
		&& ((vga_G_expected_prev[1] !== last_vga_G_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[1] = vga_G_expected_prev[1];
	end
	if (
		( vga_G_expected_prev[2] !== 1'bx ) && ( vga_G_prev[2] !== vga_G_expected_prev[2] )
		&& ((vga_G_expected_prev[2] !== last_vga_G_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[2] = vga_G_expected_prev[2];
	end
	if (
		( vga_G_expected_prev[3] !== 1'bx ) && ( vga_G_prev[3] !== vga_G_expected_prev[3] )
		&& ((vga_G_expected_prev[3] !== last_vga_G_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[3] = vga_G_expected_prev[3];
	end
	if (
		( vga_G_expected_prev[4] !== 1'bx ) && ( vga_G_prev[4] !== vga_G_expected_prev[4] )
		&& ((vga_G_expected_prev[4] !== last_vga_G_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[4] = vga_G_expected_prev[4];
	end
	if (
		( vga_G_expected_prev[5] !== 1'bx ) && ( vga_G_prev[5] !== vga_G_expected_prev[5] )
		&& ((vga_G_expected_prev[5] !== last_vga_G_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[5] = vga_G_expected_prev[5];
	end
	if (
		( vga_G_expected_prev[6] !== 1'bx ) && ( vga_G_prev[6] !== vga_G_expected_prev[6] )
		&& ((vga_G_expected_prev[6] !== last_vga_G_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[6] = vga_G_expected_prev[6];
	end
	if (
		( vga_G_expected_prev[7] !== 1'bx ) && ( vga_G_prev[7] !== vga_G_expected_prev[7] )
		&& ((vga_G_expected_prev[7] !== last_vga_G_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_G[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_G_expected_prev);
		$display ("     Real value = %b", vga_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_G_exp[7] = vga_G_expected_prev[7];
	end
	if (
		( vga_R_expected_prev[0] !== 1'bx ) && ( vga_R_prev[0] !== vga_R_expected_prev[0] )
		&& ((vga_R_expected_prev[0] !== last_vga_R_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[0] = vga_R_expected_prev[0];
	end
	if (
		( vga_R_expected_prev[1] !== 1'bx ) && ( vga_R_prev[1] !== vga_R_expected_prev[1] )
		&& ((vga_R_expected_prev[1] !== last_vga_R_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[1] = vga_R_expected_prev[1];
	end
	if (
		( vga_R_expected_prev[2] !== 1'bx ) && ( vga_R_prev[2] !== vga_R_expected_prev[2] )
		&& ((vga_R_expected_prev[2] !== last_vga_R_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[2] = vga_R_expected_prev[2];
	end
	if (
		( vga_R_expected_prev[3] !== 1'bx ) && ( vga_R_prev[3] !== vga_R_expected_prev[3] )
		&& ((vga_R_expected_prev[3] !== last_vga_R_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[3] = vga_R_expected_prev[3];
	end
	if (
		( vga_R_expected_prev[4] !== 1'bx ) && ( vga_R_prev[4] !== vga_R_expected_prev[4] )
		&& ((vga_R_expected_prev[4] !== last_vga_R_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[4] = vga_R_expected_prev[4];
	end
	if (
		( vga_R_expected_prev[5] !== 1'bx ) && ( vga_R_prev[5] !== vga_R_expected_prev[5] )
		&& ((vga_R_expected_prev[5] !== last_vga_R_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[5] = vga_R_expected_prev[5];
	end
	if (
		( vga_R_expected_prev[6] !== 1'bx ) && ( vga_R_prev[6] !== vga_R_expected_prev[6] )
		&& ((vga_R_expected_prev[6] !== last_vga_R_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[6] = vga_R_expected_prev[6];
	end
	if (
		( vga_R_expected_prev[7] !== 1'bx ) && ( vga_R_prev[7] !== vga_R_expected_prev[7] )
		&& ((vga_R_expected_prev[7] !== last_vga_R_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_R_expected_prev);
		$display ("     Real value = %b", vga_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_R_exp[7] = vga_R_expected_prev[7];
	end
	if (
		( vga_blank_expected_prev !== 1'bx ) && ( vga_blank_prev !== vga_blank_expected_prev )
		&& ((vga_blank_expected_prev !== last_vga_blank_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_blank :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_blank_expected_prev);
		$display ("     Real value = %b", vga_blank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_vga_blank_exp = vga_blank_expected_prev;
	end
	if (
		( vga_clk_expected_prev !== 1'bx ) && ( vga_clk_prev !== vga_clk_expected_prev )
		&& ((vga_clk_expected_prev !== last_vga_clk_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_clk_expected_prev);
		$display ("     Real value = %b", vga_clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_vga_clk_exp = vga_clk_expected_prev;
	end
	if (
		( vga_sync_expected_prev !== 1'bx ) && ( vga_sync_prev !== vga_sync_expected_prev )
		&& ((vga_sync_expected_prev !== last_vga_sync_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_sync_expected_prev);
		$display ("     Real value = %b", vga_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_vga_sync_exp = vga_sync_expected_prev;
	end
	if (
		( vsync_expected_prev !== 1'bx ) && ( vsync_prev !== vsync_expected_prev )
		&& ((vsync_expected_prev !== last_vsync_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vsync_expected_prev);
		$display ("     Real value = %b", vsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_vsync_exp = vsync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module simonSaysVGA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] color;
reg play;
reg reset;
reg rst;
// wires                                               
wire hsync;
wire [0:6] level_num_ssd;
wire [0:6] level_ssd;
wire [0:6] state_ssd;
wire [7:0] vga_B;
wire [7:0] vga_G;
wire [7:0] vga_R;
wire vga_blank;
wire vga_clk;
wire vga_sync;
wire vsync;

wire sampler;                             

// assign statements (if any)                          
simonSaysVGA i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.color(color),
	.hsync(hsync),
	.level_num_ssd(level_num_ssd),
	.level_ssd(level_ssd),
	.play(play),
	.reset(reset),
	.rst(rst),
	.state_ssd(state_ssd),
	.vga_B(vga_B),
	.vga_G(vga_G),
	.vga_R(vga_R),
	.vga_blank(vga_blank),
	.vga_clk(vga_clk),
	.vga_sync(vga_sync),
	.vsync(vsync)
);

// clk
initial
begin
	clk = 1'b0;
end 
// color[ 3 ]
initial
begin
	color[3] = 1'b0;
end 
// color[ 2 ]
initial
begin
	color[2] = 1'b0;
end 
// color[ 1 ]
initial
begin
	color[1] = 1'b0;
end 
// color[ 0 ]
initial
begin
	color[0] = 1'b0;
end 

// play
initial
begin
	play = 1'b1;
	play = #200000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #700000 1'b0;
end 

simonSaysVGA_vlg_sample_tst tb_sample (
	.clk(clk),
	.color(color),
	.play(play),
	.reset(reset),
	.rst(rst),
	.sampler_tx(sampler)
);

simonSaysVGA_vlg_check_tst tb_out(
	.hsync(hsync),
	.level_num_ssd(level_num_ssd),
	.level_ssd(level_ssd),
	.state_ssd(state_ssd),
	.vga_B(vga_B),
	.vga_G(vga_G),
	.vga_R(vga_R),
	.vga_blank(vga_blank),
	.vga_clk(vga_clk),
	.vga_sync(vga_sync),
	.vsync(vsync),
	.sampler_rx(sampler)
);
endmodule

